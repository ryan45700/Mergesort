#include <iostream>
#include <iomanip>
#include <vector>

//Merge sort has a complexity of nlog(n) because it is dividing list by half each time and comparing values in its separate divisions

using namespace std;
void sort(vector<int> & bar);
void mergeSort(vector<int>&left,vector<int>& right,vector<int>& bars);


int main() { //Ryan Jones of CST-201
        int myints[] = {36,13,3,28,8,100,8,56,77}; //Array must already be sorted for binary search
        vector<int> sortnum(myints,myints+9); //My set consists of nine intergers
    {
        sort(sortnum);
    }
    for (const auto &val : sortnum) { //For loop couts all the values of the vector
        cout << endl << val;
    }
    }
//Creating temporary vectors for doing merge sort
void sort(vector<int> & bar) {
    if (bar.size() <= 1) return;

    int mid = bar.size() / 2;
    vector<int> left;
    vector<int> right;

    for (size_t j = 0; j < mid;j++)
        left.push_back(bar[j]);
    for (size_t j = 0; j < (bar.size()) - mid; j++)
        right.push_back(bar[mid + j]);

    sort(left);
    sort(right);
    mergeSort(left, right, bar);
}
void mergeSort(vector<int>&left, vector<int>& right, vector<int>& bars) {
    int nL = left.size();
    int nR = right.size();
    int i = 0, j = 0, k = 0;

    while (j < nL && k < nR) {
        if (left[j] < right[k]) {
            bars[i] = left[j];
            j++;
        } else {
            bars[i] = right[k];
            k++;
        }
        i++;
    }
    while (j < nL) {
        bars[i] = left[j];
        j++;
        i++;
    }
    while (k < nR) {
        bars[i] = right[k];
        k++;
        i++;
    }
}